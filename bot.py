import os
import json
import logging
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
from openai import OpenAI, OpenAIError

# === –ó–∞–≥—Ä—É–∑–∫–∞ .env ===
load_dotenv()
TOKEN = os.getenv("TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

if not TOKEN or not OPENAI_API_KEY:
    raise ValueError("‚ùå –ù–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

client = OpenAI(api_key=OPENAI_API_KEY)

# –õ–æ–≥–∏
logging.basicConfig(level=logging.INFO)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
MAIN_MENU = [["üì¶ –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑"], ["–û—Ç–∑—ã–≤—ã", "–ö–æ–Ω—Ç–∞–∫—Ç—ã"]]
pending_colors = {}  # user_id: base_model

def load_prices():
    try:
        with open("prices_full_ready.json", "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception as e:
        logging.error(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å prices.json: {e}")
        return {}

# GPT –æ–±—Ä–∞–±–æ—Ç–∫–∞
async def extract_model_name(text):
    prompt = f"""
–¢—ã ‚Äî –ø–æ–º–æ—â–Ω–∏–∫ –º–∞–≥–∞–∑–∏–Ω–∞ —Ç–µ—Ö–Ω–∏–∫–∏. –ö–ª–∏–µ–Ω—Ç –Ω–∞–ø–∏—Å–∞–ª: "{text}"

–ò–∑–≤–ª–µ–∫–∏ –º–æ–¥–µ–ª—å —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –æ–±—ä—ë–º –ø–∞–º—è—Ç–∏. –ü—Ä–∏–º–µ—Ä: "iPhone 16 Pro Max 256".
–ï—Å–ª–∏ —Ü–≤–µ—Ç –Ω–µ —É–∫–∞–∑–∞–Ω ‚Äî –Ω–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π.
–ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ—à—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å ‚Äî –Ω–∞–ø–∏—à–∏: –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.
"""
    try:
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}]
        )
        result = response.choices[0].message.content.strip()
        logging.info(f"[GPT]: {result}")
        return result
    except OpenAIError as e:
        logging.error(f"[GPT ERROR]: {e}")
        return f"[GPT ERROR]: {e}"

# –ö–æ–º–∞–Ω–¥—ã
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = ReplyKeyboardMarkup(MAIN_MENU, resize_keyboard=True)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ –º–æ–¥–µ–ª—å —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ê–π—Ñ–æ–Ω 15 –ü—Ä–æ –ú–∞–∫—Å 256):", reply_markup=keyboard)

async def test_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–ü—Ä–∏–º–µ—Ä: /test –∞–π—Ñ–æ–Ω 15 –ø—Ä–æ 512")
        return
    text = " ".join(context.args)
    model = await extract_model_name(text)
    await update.message.reply_text(f"GPT –ø–æ–Ω—è–ª: {model}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    text = update.message.text.strip()
    logging.info(f"[–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨]: {text}")

    prices = load_prices()

    # –£—Ç–æ—á–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞
    if user_id in pending_colors:
        base_model = pending_colors.pop(user_id)
        for product, configs in prices.items():
            if product.lower() in base_model.lower():
                for config_name, price in configs.items():
                    if base_model.lower() in f"{product} {config_name}".lower() and text.lower() in config_name.lower():
                        await update.message.reply_text(f"‚úÖ {product} {config_name}: {price}")
                        return
        await update.message.reply_text("‚ùå –£–∫–∞–∑–∞–Ω–Ω—ã–π —Ü–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –û—Å–Ω–æ–≤–Ω–∞—è –º–æ–¥–µ–ª—å
    model_string = await extract_model_name(text)
    await update.message.reply_text(f"ü§ñ GPT —Ä–∞—Å–ø–æ–∑–Ω–∞–ª: {model_string}")

    if "–Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ" in model_string.lower():
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–æ–≤–∞—Ä.")
        return

    # –ü–æ–∏—Å–∫ –ø–æ JSON
    for product, configs in prices.items():
        if product.lower() in model_string.lower():
            for config_name, price in configs.items():
                if config_name.lower() in model_string.lower():
                    await update.message.reply_text(f"‚úÖ {product} {config_name}: {price}")
                    return
            # –£—Ç–æ—á–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞
            pending_colors[user_id] = model_string
            await update.message.reply_text("–£—Ç–æ—á–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–∞–∫–æ–π —Ü–≤–µ—Ç –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?")
            return

    await update.message.reply_text("‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ø—Ä–∞–π—Å–µ.")

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("test", test_command))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))
    app.run_polling()
