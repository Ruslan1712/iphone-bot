import os
import json
import logging
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
import openai

# === –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö ===
load_dotenv()
TOKEN = os.getenv("TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

if not TOKEN or not OPENAI_API_KEY:
    raise ValueError("‚ùå –ù–µ—Ç –∫–ª—é—á–µ–π –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏")

openai.api_key = OPENAI_API_KEY

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(level=logging.INFO)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
MAIN_MENU = [["üì¶ –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑"], ["–û—Ç–∑—ã–≤—ã", "–ö–æ–Ω—Ç–∞–∫—Ç—ã"]]

# === –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∞–π—Å–∞ ===
def load_prices():
    try:
        with open("prices.json", "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è prices.json: {e}")
        return {}

# === GPT —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ ===
async def extract_model_name(text):
    prompt = f"""
–¢—ã ‚Äî –ø–æ–º–æ—â–Ω–∏–∫ –º–∞–≥–∞–∑–∏–Ω–∞. –ö–ª–∏–µ–Ω—Ç –Ω–∞–ø–∏—Å–∞–ª: "{text}"
–û—Ç–≤–µ—Ç—å –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π ‚Äî –º–æ–¥–µ–ª—å –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: iPhone 15 Pro 256GB).
–ï—Å–ª–∏ –Ω–µ —É–≤–µ—Ä–µ–Ω, –Ω–∞–ø–∏—à–∏ "–Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ".
"""
    try:
        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[{"role": "user", "content": prompt}]
        )
        result = response.choices[0].message.content.strip()
        logging.info(f"[GPT]: {result}")
        return result
    except Exception as e:
        logging.error(f"[GPT ERROR]: {e}")
        return "–æ—à–∏–±–∫–∞"

# === –°—Ç–∞—Ä—Ç ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = ReplyKeyboardMarkup(MAIN_MENU, resize_keyboard=True)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ –º–æ–¥–µ–ª—å, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Ü–µ–Ω—É:", reply_markup=keyboard)

# === –û—Å–Ω–æ–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ===
async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    logging.info(f"[USER]: {text}")

    prices = load_prices()
    model_string = await extract_model_name(text)

    await update.message.reply_text(f"ü§ñ GPT —Ä–∞—Å–ø–æ–∑–Ω–∞–ª: {model_string}")

    if model_string.lower() in ["–Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", "–æ—à–∏–±–∫–∞"]:
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–æ–≤–∞—Ä.")
        return

    for product, configs in prices.items():
        if product.lower() in model_string.lower():
            if isinstance(configs, dict):
                for config_name, price in configs.items():
                    if config_name.lower() in model_string.lower():
                        await update.message.reply_text(f"‚úÖ {product} {config_name}: {price}")
                        return
                await update.message.reply_text(f"{product}:\n" + "\n".join([f"{k}: {v}" for k, v in configs.items()]))
                return
            else:
                await update.message.reply_text(f"{product}: {configs}")
                return

    await update.message.reply_text("‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ø—Ä–∞–π—Å–µ.")

# === –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ /—Ç–µ—Å—Ç ===
async def test_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–ü—Ä–∏–º–µ—Ä: /—Ç–µ—Å—Ç –∞–π—Ñ–æ–Ω 15 –ø—Ä–æ 512")
        return
    text = " ".join(context.args)
    model = await extract_model_name(text)
    await update.message.reply_text(f"GPT –ø–æ–Ω—è–ª: {model}")

# === –ó–∞–ø—É—Å–∫ ===
if __name__ == "__main__":
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("—Ç–µ—Å—Ç", test_command))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))
    app.run_polling()
