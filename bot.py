import os
import json
import logging
from dotenv import load_dotenv
from datetime import datetime
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
import openai

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env
load_dotenv()
TOKEN = os.getenv("TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

if not TOKEN or not OPENAI_API_KEY:
    raise ValueError("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ TOKEN –∏–ª–∏ OPENAI_API_KEY")

openai.api_key = OPENAI_API_KEY

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(format='%(asctime)s - %(levelname)s - %(message)s', level=logging.INFO)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
MAIN_MENU = [["üì¶ –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑"], ["–û—Ç–∑—ã–≤—ã", "–ö–æ–Ω—Ç–∞–∫—Ç—ã"]]

# === –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∞–π—Å–æ–≤ ===
def load_prices():
    try:
        with open("prices.json", "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∞–π—Å–∞: {e}")
        return {}

# === GPT —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ ===
async def extract_model_name(user_text):
    prompt = f"""
–¢—ã ‚Äî –ø–æ–º–æ—â–Ω–∏–∫ –º–∞–≥–∞–∑–∏–Ω–∞ —Ç–µ—Ö–Ω–∏–∫–∏. –ö–ª–∏–µ–Ω—Ç –Ω–∞–ø–∏—Å–∞–ª: "{user_text}"
–ò–∑–≤–ª–µ–∫–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é. –û—Ç–≤–µ—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: iPhone 15 Pro 256GB).
–ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚Äî –Ω–∞–ø–∏—à–∏: –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.
"""
    try:
        response = openai.ChatCompletion.create(
            model="gpt-4",  # –∏–ª–∏ gpt-3.5-turbo
            messages=[{"role": "user", "content": prompt}]
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        logging.error(f"GPT –æ—à–∏–±–∫–∞: {e}")
        return "–æ—à–∏–±–∫–∞"

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ===
async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    prices = load_prices()

    # GPT –ø—ã—Ç–∞–µ—Ç—Å—è —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–æ–≤–∞—Ä
    model_string = await extract_model_name(text)
    logging.info(f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ GPT: {model_string}")

    if model_string.lower() in ["–Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", "–æ—à–∏–±–∫–∞"]:
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–æ–≤–∞—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —Ç–æ—á–Ω–µ–µ.")
        return

    # –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞ –≤ –ø—Ä–∞–π—Å–µ
    for product, configs in prices.items():
        if product.lower() in model_string.lower():
            if isinstance(configs, dict):
                for config_name, price in configs.items():
                    if config_name.lower() in model_string.lower():
                        await update.message.reply_text(f"{product} {config_name}: {price}")
                        return
                # –ï—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞
                lines = [f"{k}: {v}" for k, v in configs.items()]
                await update.message.reply_text(f"{product}:\n" + "\n".join(lines))
            else:
                await update.message.reply_text(f"{product}: {configs}")
            return

    await update.message.reply_text("‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ø—Ä–∞–π—Å–µ.")

# === /start ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = ReplyKeyboardMarkup(MAIN_MENU, resize_keyboard=True)
    await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–ø–∏—à–∏—Ç–µ –º–æ–¥–µ–ª—å, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Ü–µ–Ω—É.", reply_markup=keyboard)

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
if __name__ == "__main__":
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))
    app.run_polling()
